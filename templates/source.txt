

#include XXX

/* ************************************************************************** */
/*						            PUBBLIC									  */
/* ************************************************************************** */


// type XXX:: () {

// }


/* ************************************************************************** */
/*									PRIVATE									  */
/* ************************************************************************** */


// type XXX:: () {

// }

/* ************************************************************************** */
/*						    CONSTRUCTORS & DESTRUCTORS					      */
/* ************************************************************************** */


// Default Constructor
XXX::XXX( void ) {}

// Parametric Constructor
XXX::XXX(int const p1) : _n(p1) {}

//  Copy constructor
XXX::XXX(XXX const & src) {
    *this = src;
}

//  Default Destructor
XXX::~XXX( void ) {}

/* ************************************************************************** */
/*								GETTERS & SETTERS							  */
/* ************************************************************************** */

// Getter
int XXX::getValue(void) const {
    return this->_n;
}

/* ************************************************************************** */
/*				                OPERATOR OVERLOAD							  */
/* ************************************************************************** */


//  Assignation Operator
XXX &   XXX::operator=(XXX const & rhs) {
    this->_n = rhs.getValue();
    return *this; // on dereference l'instence pour renvoyer une reference &
}

//  Addition Operator
XXX XXX::operator+(XXX const & rhs) const {
  return XXX( this->_n + rhs.getValue());
}

//  Stream Redirection Operator
std::ostream &  operator<<(std::ostream & out, XXX const & rhs) {
    out << rhs.getValue();
    return ( out );
}
